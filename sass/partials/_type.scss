@use "sass:math";
@import './partials/variables';

//set minimum and maximum breakpoints
$default-min-bp: 320px;
$default-max-bp: 960px;

@function fluidUnitless($min-size, $max-size, $min-breakpoint: $default-min-bp, $max-breakpoint: $default-max-bp, $unit: vw) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  // $slope-to-unit: round($slope * 100, 2);

  @return clamp(#{$min-size}, #{$max-size});
}

//main function to calculate the fluid type sizes
@function fluid($min-size, $max-size, $min-breakpoint: $default-min-bp, $max-breakpoint: $default-max-bp, $unit: vw) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: round($slope * 100, 2);

  $intercept-rem: round(px-to-rem($min-size - $slope * $min-breakpoint), 2);
  $min-size-rem: round(px-to-rem($min-size), 2);
  $max-size-rem: round(px-to-rem($max-size), 2);

  @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}

//convert px to rem so you can enter more legible px as arguments, and not rems
@function px-to-rem($px) {
  $rems : math.div($px, 16px) * 1rem;
  @return $rems;
}

//round returned rems to a nice whole number, instead of something like 32.666666667vw etc..
@function round($number, $decimals: 0) {
  $n : 1;

  @if $decimals > 0 {
    @for $i from 1 through $decimals {
      $n: $n * 10;
    }
  }

  @return math.div(math.round($number * $n), $n);
}

//some default values

h1,
h2,
h3,
h4,
h5,
h6 {
  -webkit-font-smoothing: antialiased;
  font-family: $large-heading-font-family;
  margin-bottom: 0;
  font-weight: 400;
}





a {
  text-decoration: none;
  color: none;
}

.content.nonHero {
  .itemsGrid {
    h2 {
      text-align: center;
      width: 100%;
      font-size: clamp(2.25rem, 6.88vw + 0.88rem, 5rem);
      font-family: $large-heading-font-family;
      font-weight: normal;
      line-height: 1em;
    }

    h3 {
      font-size: $font-size-smegular;
    }
  }
}
